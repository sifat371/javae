public interface Sequence
{
   int next();
   
   /**
      Returns a Sequence object whose elements are powers with the exponent passed as argument
      @param an integer representing the exponent of the powers in the sequence
      @return an object of a class that implements Sequence and contains the corresponding powers
   */
   public static Sequence powersOf(int n)
   {
      /**
         Inner class to implement Sequence and generate values 1^n, 2^n, 3^n, ...
      */
      class Powers implements Sequence
      {
         private int exponent;
         private int base;
         
         /**
            Constructor to initialize the base and exponent used to generate sequence elements
            @param theExponent the exponent of the powers in the sequence
         */
         public Powers(int theExponent)
         {
            exponent = theExponent;
            base = 0;
         }
         
         /**
            Returns the next element in the sequence
            @return a sequence element
         */
         public int next() 
         {
            base++;
            int result = 1;
            for (int i = 1; i <= exponent; i++)
            {
               result = result * base;
            }
            return result;
         }               
      }  
      
      return new Powers(n);
   }
   
   /**
      Returns a Sequence object whose elements are multiples of the value passed as argument
      @param an integer representing the value whose multiples are included in the sequence
      @return an object of a class that implements Sequence and contains multiples of the integer argument
   */
   public static Sequence multiplesOf(int n)
   {
      /**
         Inner class to implement Sequence and generate multiples of n
      */
      class Multiples implements Sequence
      {
         private int number;
         private int factor;
         
         /**
            Constructor to initialize the factor and number used to generate sequence elements
            @param nValue the value whose multiples are generated by the sequence
         */   
         public Multiples(int nValue)
         {
            factor = 0;
            number = nValue;
         }
          
         /**
            Returns the next element in the sequence
            @return a sequence element
         */
         public int next() 
         {
            factor++;
            return factor * number;
         }               
      }
         
      return new Multiples(n); 
   }
}
